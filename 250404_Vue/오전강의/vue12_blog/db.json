{
  "posts": [
    {
      "id": "1672531200000",
      "title": "Vue.js 3 입문자를 위한 가이드",
      "content": "Vue.js 3는 이전 버전보다 더 가볍고 빠르게 동작합니다. 컴포지션 API를 통해 코드 재사용성이 크게 향상되었으며, Teleport, Fragments, Suspense와 같은 새로운 기능들이 추가되었습니다. 이 글에서는 Vue.js 3의 주요 특징과 기본 사용법에 대해 알아보겠습니다.",
      "author": "somy",
      "createdAt": "1672531200000"
    },
    {
      "id": "1673740800000",
      "title": "TypeScript와 Vue.js의 환상적인 조합",
      "content": "TypeScript를 Vue.js 프로젝트에 도입하면 코드 안정성과 개발 생산성이 크게 향상됩니다. 특히 대규모 애플리케이션에서 타입 체크를 통한 오류 방지와 IDE의 자동 완성 기능은 개발 경험을 획기적으로 개선합니다. 이 포스트에서는 Vue.js에서 TypeScript를 효과적으로 사용하는 방법을 살펴보겠습니다.",
      "author": "minjun",
      "createdAt": "1673740800000"
    },
    {
      "id": "1675555200000",
      "title": "Pinia를 활용한 상태 관리 최적화",
      "content": "Vuex의 후속작으로 등장한 Pinia는 더 간결한 API와 TypeScript 지원을 제공합니다. 모듈 분리가 필요 없고, 자동 완성 지원이 뛰어나 개발 경험이 향상됩니다. 이 글에서는 Pinia의 주요 특징과 Vuex에서 마이그레이션하는 방법, 그리고 실전 사용 사례를 다루겠습니다.",
      "author": "somy",
      "createdAt": "1675555200000"
    },
    {
      "id": "1676851200000",
      "title": "Vue Router로 SPA 구현하기",
      "content": "단일 페이지 애플리케이션(SPA)의 장점은 빠른 페이지 전환과 향상된 사용자 경험입니다. Vue Router를 사용하면 복잡한 라우팅 로직도 쉽게 구현할 수 있습니다. 이 포스트에서는 중첩 라우트, 동적 라우트 매칭, 라우트 가드 등 Vue Router의 핵심 기능을 예제와 함께 설명합니다.",
      "author": "jiwon",
      "createdAt": "1676851200000"
    },
    {
      "id": "1679702400000",
      "title": "Vite - 차세대 프론트엔드 빌드 도구",
      "content": "Vite는 Vue 창시자인 Evan You가 개발한 빌드 도구로, 번들링 없는 개발 서버와 빠른 핫 모듈 교체(HMR)를 제공합니다. Webpack보다 훨씬 빠른 시작 시간과 업데이트 속도가 특징입니다. 이 포스트에서는 Vite의 작동 원리와 Vue.js 프로젝트에서 Vite를 설정하고 최적화하는 방법을 알아봅니다.",
      "author": "minjun",
      "createdAt": "1679702400000"
    },
    {
      "id": "1680912000000",
      "title": "Vue.js 애플리케이션 성능 최적화 전략",
      "content": "대규모 Vue 애플리케이션의 성능을 최적화하는 것은 중요한 과제입니다. 이 글에서는 컴포넌트 지연 로딩, 가상 스크롤링, 메모이제이션을 통한 불필요한 렌더링 방지 등 다양한 최적화 기법을 소개합니다. 또한 Vue DevTools와 Lighthouse를 활용한 성능 측정 방법도 함께 다룹니다.",
      "author": "somy",
      "createdAt": "1680912000000"
    },
    {
      "id": "1682121600000",
      "title": "Vue 테스트 자동화 가이드",
      "content": "안정적인 애플리케이션을 위해서는 체계적인 테스트가 필수적입니다. Vue Test Utils, Vitest, Cypress를 활용한 단위 테스트와 E2E 테스트 방법을 설명합니다. 컴포넌트 마운팅, 상태 검증, 이벤트 시뮬레이션 등 실용적인 테스트 작성법과 CI/CD 파이프라인 통합 방법까지 포괄적으로 다룹니다.",
      "author": "jiwon",
      "createdAt": "1682121600000"
    },
    {
      "id": "1683244800000",
      "title": "Vue.js와 GraphQL 통합하기",
      "content": "GraphQL은 클라이언트가 필요한 데이터를 정확히 요청할 수 있어 API 호출 효율성을 높입니다. Apollo Client와 Vue를 통합하여 GraphQL을 효과적으로 사용하는 방법, 쿼리 및 뮤테이션 구현, 캐싱 전략, 실시간 데이터 처리를 위한 구독 기능 활용법을 실제 예제와 함께 설명합니다.",
      "author": "hyunsuk",
      "createdAt": "1683244800000"
    },
    {
      "id": "1684540800000",
      "title": "Vue.js로 마이크로프론트엔드 구현하기",
      "content": "마이크로프론트엔드 아키텍처는 대규모 팀이 독립적으로 프론트엔드 애플리케이션의 일부를 개발하고 배포할 수 있게 합니다. 이 포스트에서는 Module Federation, Single-SPA, Web Components 등 다양한 접근 방식을 활용해 Vue.js 기반의 마이크로프론트엔드를 구현하는 방법과 팀 간 협업 전략을 소개합니다.",
      "author": "minjun",
      "createdAt": "1684540800000"
    },
    {
      "id": "7fd3",
      "title": "한 번에 정리하는 자바스크립트 비동기 코드 작성법",
      "content": "자바스크립트는 싱글 스레드 언어이기 때문에, 동기적으로 실행되는 코드가 시간이 오래 걸리면 전체 코드의 흐름이 멈추는 단점이 있습니다. 이를 해결하기 위해 setTimeout과 같은 비동기 메서드를 활용하여 코드 실행을 지연시키지 않으면서도, 원하는 시점에 작업을 수행할 수 있었습니다. 또한 프로미스 객체를 사용하면 비동기 작업의 상태를 관리하고, 성공 및 실패 처리를 더 직관적으로 할 수 있다는 점도 배웠죠. 하지만 프로미스를 제대로 활용하지 못하면 여전히 복잡한 코드가 생성될 수 있습니다. 특히 지난 글에서 살짝 언급했던 ‘콜백 지옥(Callback Hell)’ 현상은 코드 가독성을 심각하게 저하시킬 수 있습니다. 이번 글에서는 콜백 지옥이 무엇인지, 그리고 이를 어떻게 해결할 수 있는지, 그리고 더 깔끔한 비동기 코드 작성을 위해 async/await을 어떻게 활용하는지에 대해 알아보겠습니다. 또한 실전에서 가장 많이 활용되는 API 호출과 비동기 처리의 관계에 대해서도 함께 살펴봅시다.",
      "createdAt": "1743690370692"
    }
  ]
}
